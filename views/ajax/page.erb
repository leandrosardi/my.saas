<%
return_message = {}
return_message['status'] = 'success'
begin
    object = params[:object]
    cls = BlackStack::API.classes[object.to_sym]
    page = (@body['page'] || 1).to_i
    limit = (@body['limit'] || 25).to_i
    filters = @body['filters'] || {}
    order = @body['order'] || 'id'
    asc = @body['asc'].nil? ? true : @body['asc']
#binding.pry
    # getting the dataset
    ds = cls.page(@account, page: page, limit: limit, filters: filters)
    return_message['count'] = cls.count(@account, filters: filters)
    ds = asc ? ds.order(order.to_sym) : ds.order(Sequel.desc(order.to_sym))
    ds = ds.limit(limit).offset((page-1)*limit)

    #n = ds.count
    arr = ds.all

    #return_message['total'] = n
    return_message['results'] = arr.map { |o| o.to_h }
rescue Exception => e
    return_message['status'] = @body['backtrace'] ? e.to_console : e.message
end
return return_message.to_json
%>
