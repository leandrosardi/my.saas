<%
# choose the theme
theme = 'black-blue'
%>

<head>
	<%=BlackStack::Funnel.ga_head_code%>

	<meta charset="ISO-8859-1">
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
	<title>
		<%=CS_HOME_TITLE%>
	</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width">

	<link rel="icon" href="<%=CS_HOME_FAVICON%>">

	<!-- Global site tag (gtag.js) - Google Analytics -->
	<!-- TODO: setup this as an account property -->
	<script async src="https://www.googletagmanager.com/gtag/js?id=G-XHCG5LE744"></script>
	<script>
	  window.dataLayer = window.dataLayer || [];
	  function gtag(){dataLayer.push(arguments);}
	  gtag('js', new Date());

	  gtag('config', 'G-XHCG5LE744');
	</script>
	<!-- Global site tag (gtag.js) - Google Analytics -->

	<script src="/classic/javascripts/1.3.0/adminflare-demo-init.min.js" type="text/javascript"></script>

	<link href="https://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,400,300,600,700" rel="stylesheet" type="text/css">

	<script type="text/javascript">
		DEMO_CURRENT_THEME = "<%=theme%>";

		// Include Bootstrap stylesheet
		document.write('<link href="/classic/css/' + DEMO_ADMINFLARE_VERSION + '/' + DEMO_CURRENT_THEME + '/bootstrap.min.css" media="all" rel="stylesheet" type="text/css" id="bootstrap-css">');
		// Include AdminFlare stylesheet
		document.write('<link href="/classic/css/' + DEMO_ADMINFLARE_VERSION + '/' + DEMO_CURRENT_THEME + '/adminflare.min.css" media="all" rel="stylesheet" type="text/css" id="adminflare-css">');
		// Include AdminFlare page stylesheet
		document.write('<link href="/classic/css/' + DEMO_ADMINFLARE_VERSION + '/pages.css" media="all" rel="stylesheet" type="text/css">');
		// Include Style to Draw Wizards
		document.write('<link href="/classic/css/wizard.css" media="all" rel="stylesheet" type="text/css">');
		// Include Style to Draw Plan Tables
		document.write('<link href="/classic/css/plantable.css" media="all" rel="stylesheet" type="text/css">');
		// Include Style to Draw Templates
		document.write('<link href="/core/css/templates.css" media="all" rel="stylesheet" type="text/css">');
		// Include Style to Draw Landing Pages
//		document.write('<link href="/classic/css/landing.css" media="all" rel="stylesheet" type="text/css">');
		// Include Awesomplete stylesheet
		document.write('<link href="/classic/css/awesomplete.css" media="all" rel="stylesheet" type="text/css">');
		// Include FilterJS stylesheet
		document.write('<link href="/classic/css/filters.css" media="all" rel="stylesheet" type="text/css">');
		// Include NavBar
		document.write('<link href="/classic/css/navbar.css" media="all" rel="stylesheet" type="text/css" id="ajax-navbar-css">');
		// Include Dialog
		document.write('<link href="/classic/css/dialog.css" media="all" rel="stylesheet" type="text/css" id="ajax-dialog-css">');

		// Include CSS files of extensions
		<%
		# include the CSS files of the extensions
		# reference: https://github.com/leandrosardi/mysaas/issues/33
		BlackStack::Extensions.extensions.each { |e|
			e.css_files.each { |f|
				%>
				document.write('<link href="<%=f.to_s.encode_html%>" media="all" rel="stylesheet" type="text/css">');
				<%
			}
		}
		%>
	</script>

	<script type="text/javascript">

				// behaviour of pages when load
				let hide_loading_message_after_page_load = true;

				//
				const reLinkedInGroup = /^http(s)?:\/\/(www\.)?linkedin\.com\/groups\/(\d+)(\/(profile)?)?$/;
				const reLinkedInGroupUrlCode = /(\d+)/
				function getLinkedInGroupUrlCode(url) {
					if (!reLinkedInGroup.test(url)) {
						return null;
					}
					return url.match(reLinkedInGroupUrlCode)[0];
				}

				// apply tooltips CSS to any element with a title attribue
				function applyToolTips() {
					$('[title]').tooltip({
						'placement': 'bottom',
					});
				}

				// enable select-all-text when focus on any input with class `select-all-on-focus`
				function enableSelectAllTextOnFocus() {
					$('.select-all-on-focus').focus(function () {
						this.select();
					});
				}

				// this function check/uncheck all the rows,
				// then calls methods h['afterCallback'] in order.
				function enableSelectRows(h) {
					// update list of selected rows
					function updateSelectedIDs() {
						a = $(".selected-ids");
						i = 0;
						a.val('');
						$(".select-row:checked").each(function(index) {
							if (i>0) { a.val( a.val() + ',' ); }
							a.val( a.val() + $(this).data('id') );
							i++;
						});
					}

					// initialize selected rows, only if sessionPersistance is on.
					if ( h['sessionPersistance'] == true ) {
						$(".selected-ids").val().split(',').forEach(function(id) {
							$('.select-row[data-id="'+id+'"]').prop( "checked", true );
						})
						// callback function for after you select/unselect rows
						h['afterCallback']();
					}

					// select/unselect all rows.
					$(".select-all-rows").click(function() {
						b = $(this);
						d = $(".select-row");
						if ( b.prop('checked') ) {
							d.prop( "checked", true );
						} else {
							d.prop( "checked", false );
						}
						// update list of selected rows
						updateSelectedIDs();
						// callback function for after you select/unselect rows
						h['afterCallback']();
					});

					// select/unselect one signle row
					$(".select-row").click(function() {
						// update list of selected rows
						updateSelectedIDs();
						// callback function for after you select/unselect rows
						h['afterCallback']();
					});
				}

				//
				function selectRow(id) {
					$('.select-row[data-id="'+id+'"]').prop( "checked", true );
				}

				//
				function newHttpRequest()
				{
					var xmlhttp;
					if (window.XMLHttpRequest)
					{
					 	// code for IE7+, Firefox, Chrome, Opera, Safari
						xmlhttp=new XMLHttpRequest();
					}
					else
					{
					 	// code for IE6, IE5
						xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
					}

					return xmlhttp ;
				}

				//
				function newXmlParser(txt) {
					if (window.DOMParser) {
						parser = new DOMParser();
						xmlDoc = parser.parseFromString(txt, "text/xml");
					} else// Internet Explorer
					{
						xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
						xmlDoc.async = false;
						xmlDoc.loadXML(txt);
					}

					return xmlDoc
				}

				//
				function addEvent(element, eventName, fn) {
					if (element.addEventListener)
						element.addEventListener(eventName, fn, false);
					else if (element.attachEvent)
						element.attachEvent('on' + eventName, fn);
				}

				function showWait(s='') {
					$("#wait").show();
					$("#wait-caption").text(s);
				}

				function hideWait() {
					$("#wait").hide();
				}

				// close any existing alert
				function close_alerts() {
					$('.mysaas-alert').remove();
				}

				function draw_alert(title, background_color='green', border_color='green', success_lines = [], error_lines = [], remove_seconds = -1) {
				    // Create the container div
				    var container = document.createElement('div');
						container.className = 'mysaas-alert'
				    container.style.position = 'fixed';
				    container.style.bottom = '0';
				    container.style.left = '0';
				    container.style.width = '100%';
				    container.style.backgroundColor = background_color;
				    container.style.borderTop = '1px solid ' + border_color;
				    container.style.padding = '15px';
				    container.style.boxSizing = 'border-box';
				    container.style.zIndex = '9999'; // Ensure it's on top
				    container.style.opacity = '0.85'; // Semi-transparent

				    // Create a close button
				    var closeButton = document.createElement('span');
				    closeButton.innerHTML = '&times;';
				    closeButton.style.position = 'absolute';
						closeButton.style.color = 'black'
				    closeButton.style.right = '15px';
				    closeButton.style.top = '15px';
				    closeButton.style.cursor = 'pointer';
				    closeButton.style.fontSize = '20px';
				    closeButton.onclick = function() {
				        document.body.removeChild(container);
				    };
				    container.appendChild(closeButton);

				    // Create the title
				    var titleElement = document.createElement('h3');
				    titleElement.textContent = title;
				    titleElement.style.margin = '0 0 10px 0';
						titleElement.style.color = 'black';
				    container.appendChild(titleElement);

				    // Create the list
				    var list = document.createElement('ul');
				    list.style.listStyle = 'none';
				    list.style.padding = '0';
				    list.style.margin = '0';

				    // For each success_line, create the li element
				    success_lines.forEach(function(line) {
				        var li = document.createElement('li');
				        li.style.marginBottom = '5px';
								li.style.color = 'black';
				        var icon = document.createElement('i');
				        icon.className = 'icon-ok';
				        icon.style.color = 'black';
				        icon.style.marginRight = '5px';
				        li.appendChild(icon);
				        li.appendChild(document.createTextNode(line));
				        list.appendChild(li);
				    });

				    // For each error_line, create the li element
				    error_lines.forEach(function(line) {
				        var li = document.createElement('li');
				        li.style.marginBottom = '5px';
								li.style.color = 'black';
				        var icon = document.createElement('i');
				        icon.className = 'icon-remove';
				        icon.style.color = 'black';
				        icon.style.marginRight = '5px';
				        li.appendChild(icon);
				        li.appendChild(document.createTextNode(line));
				        list.appendChild(li);
				    });

				    container.appendChild(list);

				    // Append the container to the body
				    document.body.appendChild(container);

						$(document).keyup(function(e) {
							if (e.keyCode == 27) { // esca[e]
								container.remove();
							}
						});

						// If remove_seconds is not -1, set a timeout to hide the alert
				    if (remove_seconds !== -1) {
				        setTimeout(function() {
				            container.remove();
				        }, remove_seconds * 1000);
				    }
				}

				function draw_success_alert(title, success_lines = [], error_lines = [], remove_seconds = -1) {
					draw_alert(title, 'rgb(160,255,160)', 'green', success_lines, error_lines, remove_seconds);
				}

				function draw_error_alert(title, success_lines = [], error_lines = [], remove_seconds = -1) {
					draw_alert(title, 'rgb(255,160,190)', 'red', success_lines, error_lines, remove_seconds);
				}

				function draw_info_alert(title, success_lines = [], error_lines = [], remove_seconds = -1) {
					draw_alert(title, 'rgb(160,210,255)', 'blue', success_lines, error_lines, remove_seconds);
				}

				function semiTransparentLinks() {
					// make all the .semi-transparent-link semi-transparent
					$('.semi-transparent-link').css('opacity', '0.5');
					// a .semi-transparent-link link gets opaciity when the mouse pointer is over
					$('.semi-transparent-link').hover(function() {
						$(this).css('opacity', '1');
					}
					, function() {
						$(this).css('opacity', '0.5');
					});
				}

				function formatLinks() {
					// remove text decoration from all links
					$('a').css('text-decoration', 'none');
					// remove text decoration from all buttons with class .btn-link
					$('.btn-link').css('text-decoration', 'none');
				}
	</script>

	<script src="/classic/javascripts/1.3.0/modernizr-jquery.min.js" type="text/javascript"></script>
	<script src="/classic/javascripts/1.3.0/bootstrap.min.js" type="text/javascript"></script>
	<script src="/core/javascripts/contenteditable.js" type="text/javascript"></script>
	<script src="/core/javascripts/data.min.js" type="text/javascript"></script>
	<script src="/core/javascripts/selectrows.min.js" type="text/javascript"></script>
	<script src="/core/javascripts/filters.min.js" type="text/javascript"></script>
	<script src="/core/javascripts/editables.min.js" type="text/javascript"></script>
	<script src="/core/javascripts/images.min.js" type="text/javascript"></script>
	<script src="/core/javascripts/tags.min.js" type="text/javascript"></script>
	<script src="/core/javascripts/profiles.min.js" type="text/javascript"></script>
	<script src="/core/javascripts/purify.min.js" type="text/javascript"></script>
	<%# <script src="/core/javascripts/layout.js" type="text/javascript"></script> %>
	<%# <script src="/core/javascripts/table.js" type="text/javascript"></script> %>
	<%# <script src="/core/javascripts/unibox.js" type="text/javascript"></script> %>
	<script src="/core/javascripts/misc.js" type="text/javascript"></script>
	<script src="/core/javascripts/templates.js" type="text/javascript"></script>
	<%# <script src="/core/javascripts/unibox.layout.js" type="text/javascript"></script> %>

	<%
	# if the constant TINYMCE_API_KEY is defined
	# then include the TinyMCE script
	if defined?(TINYMCE_API_KEY)
	%>
	<script src="https://cdn.tiny.cloud/1/<%=TINYMCE_API_KEY%>/tinymce/7/tinymce.min.js" referrerpolicy="origin"></script>
	<%
	end # if defined?(TINYMCE_API_KEY)
	%>

	<script src="/classic/javascripts/awesomplete.min.js" type="text/javascript"></script>
	<script src="/classic/javascripts/1.3.0/adminflare.min.js" type="text/javascript"></script>
	<!-- TODO: Getting javascript error when enable this line.
	<script src="/landing/javascripts/ajax_status-1.0.1.min.js" type="text/javascript"></script>
	-->
	<!-- Include JS files of extensions -->
	<%
	# include the CSS files of the extensions
	# reference: https://github.com/leandrosardi/mysaas/issues/33
	BlackStack::Extensions.extensions.each { |e|
		e.js_files.each { |f|
			%>
			<%="<script src='#{f.to_s.encode_html}' type='text/javascript'></script>"%>
			<%
		}
	}
	%>
	<style>
		// Modals to show pictures in carousel
		img.screenshot {
			margin-bottom: 10px;
			border: 1px solid #ddd;
			shadow: 0 1px 4px rgba(0, 0, 0, 0.067);
			// link like mouse pointer
			cursor: pointer;
		}

		div.screenshot-modal {
			display: none;
			position: fixed;
			z-index: 100000000000;

			//top: 50px;
			//left: 50px;
			//right: 50px;
			//bottom: 50px;

			top: 0px;
			left: 0px;
			width: 100%;
			height: 100%;

			border: 5px solid #ddd;
			//border-radius: 50px;
			//width: 100%;
			//height: 100%;
		}

		div.screenshot-modal img {
			width: 100%;
			height: 100%;
		}

		div.screenshot-modal button.close {
			position: absolute;
			top: 50px;
			right: 50px;
			//border-radius: 50px;
			font-size: 50pt;
			background-color: white;
			z-index: 100000000001;
			color: blue;
			text-decoration: none;
		}

		div.screenshot-modal button.next {
			position: absolute;
			top: 50%;
			right: 50px;
			//border-radius: 50px;
			font-size: 50pt;
			background-color: white;
			z-index: 100000000001;
			color: blue;
			text-decoration: none;
		}

		div.screenshot-modal button.prev {
			position: absolute;
			top: 50%;
			left: 50px;
			//border-radius: 50px;
			font-size: 50pt;
			background-color: white;
			z-index: 100000000001;
			color: blue;
			text-decoration: none;
		}


		// Tables with clickeable rows to show details in the right-side bar

		table tbody tr.clickeable td {
			cursor: pointer;
		}

		table tbody tr.clickeable td:last-child {
			border-right: 5px dashed rgb(245,245,245);
		}

		table tbody tr.clickeable:hover td:last-child {
			border-right: 5px dashed rgb(255,175,175);
		}

		table tbody tr.clickeable:hover td {
			background-color: rgb(245,245,245);
		}

		table tbody tr.selected td:last-child {
			border-right: 5px dashed red;
		}

/* Dark Mode Bootstrap Add-on */

/* General Dark Mode Colors */
body.dark-mode {
    /* Background Image */
    //background: linear-gradient(90deg, rgba(44, 0, 62, 0.8), rgba(18, 1, 54, 0.8)), url('/classic/images/blockquote-bg.png') no-repeat center center fixed;
    background: url('/classic/images/blockquote-bg.png') no-repeat center center fixed;
    background-size: cover;
    color: #f1f1f1;

    /* Ensure the background covers the entire viewport */
    min-height: 100vh;

    /* Optional: Fallback background color in case the image doesn't load */
    background-color: #120136;
}



.dark-mode .bg-dark {
    background-color: #1c1c1c !important;
}

.dark-mode .text-light {
    color: #e0e0e0 !important;
}

.dark-mode .text-muted {
    color: #a0a0a0 !important;
}

/* Navbar */
.dark-mode .navbar {
    background-color: rgba(31, 31, 31, 0.22); /* Semi-transparent */
    border-bottom: 1px solid #333;
}

.dark-mode .navbar .nav-link {
    color: #f1f1f1 !important;
}

.dark-mode .navbar .nav-link:hover {
    color: #e6e6e6 !important;
}

/* Buttons */
.dark-mode .btn {
    color: #fff;
    background-color: #444;
    border-color: #555;
}

.dark-mode .btn:hover {
    background-color: #555;
    border-color: #666;
}

/* Card Component */
.dark-mode .card {
    background-color: rgba(28, 28, 28, 0.22); /* Semi-transparent */
    border-color: #333;
}

.dark-mode .card-header {
    background-color: rgba(42, 42, 42, 0.22); /* Semi-transparent */
    border-bottom: 1px solid #444;
}

.dark-mode .card-body {
    color: #e0e0e0;
}

/* Form Elements */
.dark-mode .form-control {
    background-color: rgba(46, 46, 46, 0.22); /* Semi-transparent */
    color: #e0e0e0;
    border-color: #444;
}

.dark-mode .form-control::placeholder {
    color: #a0a0a0;
}

.dark-mode .form-select {
    background-color: rgba(46, 46, 46, 0.22); /* Semi-transparent */
    color: #e0e0e0;
    border-color: #444;
}

/* Table Component */
.dark-mode .table {
    color: #e0e0e0;
    background-color: rgba(31, 31, 31, 0.22); /* Semi-transparent */
}

.dark-mode .table thead {
    background-color: rgba(42, 42, 42, 0.22); /* Semi-transparent */
}

.dark-mode .table tbody tr {
    border-color: #444;
}

.dark-mode .table-striped tbody tr:nth-of-type(odd) {
    background-color: rgba(44, 44, 44, 0.22); /* Semi-transparent */
}

/* Tooltip & Popover */
.dark-mode .tooltip {
    background-color: #444;
    color: #f1f1f1;
}

.dark-mode .popover {
    background-color: rgba(42, 42, 42, 0.22); /* Semi-transparent */
    color: #f1f1f1;
}

/* Modals */
.dark-mode .modal-content {
    background-color: rgba(30, 30, 30, 0.22); /* Semi-transparent */
    color: #e0e0e0;
}

.dark-mode .modal-header {
    border-bottom: 1px solid #333;
}

.dark-mode .modal-footer {
    border-top: 1px solid #333;
}

/* Alerts */
.dark-mode .alert {
    background-color: rgba(42, 42, 42, 0.22); /* Semi-transparent */
    color: #f1f1f1;
    border-color: #444;
}

/* Utility Classes */
.bg-dark-mode {
    background-color: #121212 !important;
}

.text-dark-mode {
    color: #f1f1f1 !important;
}

/* Sections and Divs */
.dark-mode section.row-fluid {
    background-color: rgba(17, 17, 17, 0.22); /* Semi-transparent */
    color: #fff;
}

.dark-mode section.row-fluid div {
    background-color: rgba(17, 17, 17, 0.22); /* Semi-transparent */
    color: #fff;
}

.dark-mode section.div {
    background-color: rgba(0, 0, 0, 0.22); /* Semi-transparent */
    color: #fff;
}

.dark-mode table {
    background-color: rgba(0, 0, 0, 0.22); /* Semi-transparent */
    color: #fff;
}

.dark-mode th {
    background-color: rgba(0, 0, 0, 0.22); /* Semi-transparent */
    color: #fff;
}

.dark-mode tr {
    background-color: rgba(0, 0, 0, 0.22); /* Semi-transparent */
    color: #fff;
}

.dark-mode td {
    background-color: rgba(0, 0, 0, 0.22); /* Semi-transparent */
    color: #fff;
}

.dark-mode p {
    color: #fff;
}

.dark-mode span {
    color: #fff;
}

.dark-mode h1,
.dark-mode h2,
.dark-mode h3,
.dark-mode h4 {
    color: #fff;
}

.dark-mode a {
    color: #ddf;
}

.dark-mode a:hover {
    color: #eeef;
}



		// general styles
		a {
			text-decoration: none;
		}

		button.btn-link {
			text-decoration:none;
		}

		img.avatar {
			border-radius: 50%;
		}

		/*
		* Dark mode
		*
		*/
		/*
		body {
			background-color: black;
			border-color: black transparent;
			border: 1px solid black;
			padding-top: 0px;
			padding-left: 0px;
			margin-top: 35px;
			margin-left: 85px;
		}

		section {
			background-color: black;
			border-color: black transparent;
			border: 1px solid black;
			//padding: 0px;
			//margin: 0px;
		}

		div {
			background-color: black;
			border-color: black transparent;
			border: 1px solid black;
			//padding: 0px;
			//margin: 0px;
		}

		table {
			background-color: black;
			border-color: black transparent;
			border: 1px solid black;
			padding: 0px;
			margin: 0px;
		}

		tbody {
			background-color: black;
			border-color: black transparent;
			border: 1px solid black;
			padding: 0px;
			margin: 0px;
		}

		thead {
			background-color: black;
			border-color: black transparent;
			border: 1px solid black;
			padding: 0px;
			margin: 0px;
		}
		*/

		/*
		* Dark mode
		*
		*/
		section.dark {
			background-color: black;
			color: white;
		}

		section.dark input {
			background-color: black;
			color: white;
		}

		section.dark table tbody tr {
			background-color: black;
			border: 2px none black;
		}

		section.dark table tbody tr:hover {
			background-color: rgb(30,30,30);
			border: 2px solid yellow;
		}

		/*
		* Style for fullscreen dashboard
		*
		*/
		section.fullscreen {
			position:absolute;
			top:0;
			left:0;
			width:100%;
			height:100%;
			z-index:999999999;
		}

		section.maximizable div.controls {
			position:relative;
			width: 100%;
		}

		section.maximizable div.controls button {
			position:absolute;
			top:-25px;
			right:-25px;
		}

		/*
			if the section is in fullscreen mode, then the header of the table will be sticky to the top even if the table is scrolled down.
			reference: https://csslayout.io/sticky-table-headers/
		*/
		section.fullscreen table thead {
			position: sticky;
			top: 0;
			z-index: 9999999;
			opacity: 1.0;
			background-color: black;
		}

		/*
		* Style for scripts shown in both the responses and pipeline edition screen.
		*
		*/
		pre {
			mergin: 0px;
			padding: 0px;
			border:0px;
			background-color: transparent;
			font-size: 14px;
			font-name: Arial;
			color: rgb(64, 97, 140);
		}

		span.filesample {
			font-size: 12px;
			font-name: Arial;
			color: rgb(64, 97, 140);
			border: 1px rgb(175,175,175) solid;
			border-radius: 5px;
			background-color: rgb(235,235,235);
			margin: 5px;
			padding: 5px;

		}

		pre.filesample {
			font-size: 12px;
			font-name: Arial;
			color: rgb(64, 97, 140);
			border: 1px rgb(175,175,175) solid;
			border-radius: 5px;
			background-color: rgb(235,235,235);
			margin: 5px;
			padding: 5px;

		}

		/*
		* Waiting GIF
		*
		*/
		div.wait {
			position:   absolute;
			z-index:    1000;
			top:        0;
			left:       0;
			height:     100%;
			width:      100%;
			background: rgba( 255, 255, 255, .8 );
		}

		/*
		 * Popups
		 *
		 */
		div.popup {
			position:fixed;
			top:0;
			left:0;
			width:100%;
			height:100%;
			z-index:99999;
			background-color:white;
			opacity: 0.22;
			overflow-y:scroll;
			display:none;
		}

		div.popup div.top-right-buttons {
			position:absolute;
			top:17px;
			right:17px;
		}

		div.popup div.area {
			position:relative;
			top:15%;
			left:15%;
			width:70%;
			height:70%;
		}

		div.popup div.area h1 {
			margin-bottom:34px;
		}

		/*
		 *
		 */
		span.yellow-backgrownd {
			background-color: yellow;
			color: black;
		}

		div.fixed-position {
			position: fixed;
		}

		.same-line {
			display: inline-block;
		}

		.loading-container {
			position: fixed;
			left: 0;
			top: 0;
			width: 100%;
			height: 100%;
			background-color: white;
			opacity: 0.5;
			text-align: center;
			padding-top: 45vh;
			display: none;
			z-index: 9999;
		}

		#loader {
			//border: 16px solid #f3f3f3;
			//border-radius: 50%;
			//border-top: 16px solid #3498db;
			width: 120px;
			height: 120px;
			-webkit-animation: spin 2s linear infinite;
			/* Safari */
			animation: spin 2s linear infinite;
			position: relative;
		}

		#loader img {
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
		}

		table.fix {
			table-layout: fixed;
		}

		table.fix td.fix {
			white-space:nowrap;
			overflow:hidden;
			text-overflow:ellipsis;
		}
	</style>

	<script type="text/javascript">
		// clickeable rows
		function on_click_tr_clickeable(o) {
			var id = $(o).data("id");
			// if the row is not selected, then add the class selected
			if ($(o).hasClass("selected") == false) {
				$(o).addClass("selected");
			}
			// remove the class selected from all the other rows tr.clickeable.
			$("tr.clickeable").each(function() {
				if ($(this).data("id") != id) {
					$(this).removeClass("selected");
				}
			});
		}

		// images carousel functions
		function update_numbers() {
			img = $('#screenshot_modal_img');
			var number = parseInt($(img).attr('data-number'));
			var total = $(".screenshot").length;
			$('#number').html(number+1);
			$('#total').html(total);
		}

		function next_screenshot() {
			img = $('#screenshot_modal_img');
			var number = parseInt($(img).attr('data-number'));
			var next_number = number + 1;
			var total = $(".screenshot").length;
			if (next_number >= total) {
			next_number = 0;
			}
			// get the src of the next image
			let q = '#screenshot-'+next_number.toString();
			let src = $(q).attr('src');
			$(img).attr('src', src);
			$(img).attr('data-number', next_number);
			// update the number
			update_numbers();
		}

		function prev_screenshot() {
			img = $('#screenshot_modal_img');
			var number = parseInt($(img).attr('data-number'));
			var prev_number = number - 1;
			var total = $(".screenshot").length;
			if (prev_number < 0) {
			prev_number = total - 1;
			}
			// get the src of the next image
			let q = '#screenshot-'+prev_number.toString();
			let src = $(q).attr('src');
			$(img).attr('src', src);
			$(img).attr('data-number', prev_number);
			// update the number
			update_numbers();
		}


		// on click on .close, hide the screenshot modal
		$("#screenshot_modal .close").click(function() {
			$("#screenshot_modal").hide();
		});

		// on press escape, hide the screenshot modal
		$(document).keyup(function(e) {
			if (e.keyCode == 27) {
			$("#screenshot_modal").hide();
			}
		});

		// on click on the image, go to the next image
		$("#screenshot_modal_img").click(function() {
			next_screenshot();
		});

		// on click on the next button, go to the next image
		$("#screenshot_modal .next").click(function() {
			next_screenshot();
		});

		// on press the right arrow, go to the next image
		$(document).keyup(function(e) {
			if (e.keyCode == 39) {
			next_screenshot();
			}
		});

		// on click on the prev button, go to the prev image
		$("#screenshot_modal .prev").click(function() {
			prev_screenshot();
		});

		// on press the left arrow, go to the prev image
		$(document).keyup(function(e) {
			if (e.keyCode == 37) {
				prev_screenshot();
			}
		});


		// Make a POST request to and ajax end-point.
		function callx(h) {
      let url = h.url;
      let params = h.params;
      let on_error = h.on_error;
      let on_success = h.on_success;
      let alerts_delay = h.alerts_delay;

      if (alerts_delay == null) alerts_delay = -1;

	  	fetch(url, {
        method: 'POST',                      	// HTTP method
        headers: {
          'Content-Type': 'application/json' 	// Specify JSON content
        },
        body: JSON.stringify(params)           	// Convert data to JSON string
      })
      .then(response => {
        if (!response.ok) {
          // Handle HTTP errors
          draw_error_alert("Operation Error", [], [`Network response from ${url} was not ok: ${response.statusText}`], alerts_delay);
        }
        return response.json(); // Parse the JSON response
      })
      .then(data => {
        s = JSON.stringify(data, null, 2);
        if (data.status == 'success') {
          // Handle application-level errors
          if (on_success != null) {
            on_success(data);
          } else {
            draw_success_alert("Operation Success", [], [`End-point ${url} returned successfully.`], alerts_delay);
          }
        } else {
          if (on_error != null) {
              on_error(data);
          } else {
            draw_error_alert("Operation Error", [], [`End-point ${url} returned an error: ${s}`], alerts_delay);
          }
        }
      })
      .catch(error => {
        console.error('Fetch operation failed:', error); // Log detailed error for debugging

        let errorMessage = 'An unexpected error occurred. Please try again later.';

        // Check if the error has a status and body
        if (error.status && error.body) {
            // If the response body is an object, stringify it for readability
            const responseBody = typeof error.body === 'object' ? JSON.stringify(error.body) : error.body;
            errorMessage = `Error ${error.status}: ${responseBody}`;
        } else if (error.message) {
            // Fallback to the error message
            errorMessage = `Error: ${error.message}`;
        }

        draw_error_alert("Operation Error", [], [`Fetch error on end-point ${url}: ${errorMessage}`], alerts_delay);
      });
    }

		// draw pagination function
		//
		function drawPagination(o, current_page, total_pages) //, page_size=10)
		{
			url = '?p='; // url to get the next page

			o.html("");
			u = $("<ul></ul>");
			o.append(u);

			if (current_page>1) {
				li = $('<li><a href="'+url+(current_page-1).toString()+'">Prev</a></li>');
			} else {
				li = $('<li class="disabled"><a href="#">Prev</a></li>')
			}
			u.append(li);

			i=1
			i_prev = 1
			while (i<=total_pages) {
				if (i==current_page) {
					sClassActive="class='active'"
				} else {
					sClassActive=""
				}
				if ( i==1 || i==total_pages || (i>=current_page-2 && i<=current_page+2) ) {
					if (i>i_prev+1) {
						li = $('<li><span>...</span></li>')
						u.append(li)
					}
					li = $('<li '+sClassActive+'><a href="'+url+i.toString()+'">'+i.toString()+'</a></li>')
					u.append(li)
					i_prev=i
				}
				i=i+1
			}

			if (current_page<total_pages) {
				i = $('<li><a href="./'+url+(current_page+1).toString()+'">Next</a></li>');
			} else {
				i = $('<li class="disabled"><a href="#">Next</a></li>')
			}
			u.append(i);

			/*
			 * DEPRECATED BY NOW
			 *
			// create a drodown list with different page sizes
			li = $('<li><span style="margin-left:25px;"><i class="icon-caret-right"></i> <b>Page Size:</b></span> <select id="page-size" class="form-control" style="width: 100px;"><option value="10">10</option><option value="20">20</option><option value="50">50</option><option value="100">100</option></select></li>');
			u.append(li);
			// set the current page size in the dropdown list
			$('#page-size').val( page_size );

			// when the user changes the page size
			// then reload the page with the new page size in the parameter z of the URL
			$('#page-size').change(function() {
				page_size = $(this).val();
				window.location.href = window.location.href.split('?')[0] + '?z=' + page_size;
			});
			*/
		}
	</script>

</head>
