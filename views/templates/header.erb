<%
require "digest/md5"
login = @login
user = login.user

if BlackStack::Extensions.exists?(:i2p)
	account = BlackStack::I2P::Account.where(:id=>user.id_account).first
else
	account = BlackStack::MySaaS::Account.where(:id=>user.id_account).first
end

# get extension
e = BlackStack::Extensions::extensions.select { |e| e.name.downcase==@service.downcase && e.show_in_top_bar }.first
if e.nil?
	@service = nil 
	e = nil
end

# Get global layout preferences: darkmode
path = request.path.gsub('/', '_')
dark = @login.user.preference('dark', 'no', params[:dark])

# Get page layout preferences: tab number selected; and pool1, pool2, pool3 (expanded or colapsed) 
tab = @login.user.preference("#{path}_tab", '1', params[:tab])
pool1 = @login.user.preference("{path}_pool1", 'expanded', params[:pool1])
pool2 = @login.user.preference("{path}_pool1", 'expanded', params[:pool2])
pool3 = @login.user.preference("{path}_pool1", 'expanded', params[:pool3])
%>

<div id='wait' name='wait' style='display: none; position: fixed; z-index: 1000000; top: 0; left: 0; height: 100%; width: 100%; background: rgba( 255, 255, 255, .8 ) 50% 50% no-repeat;'>
	<br/>
	<br/>
	<br/>
	<div id='loader-div'>
		<div id='loader' style='margin: 0 auto'>
			<img src='<%=LOADING_IMAGE_PATH%>' />
		</div>
	</div>
	<br/>
	<br/>
	<center><span id='wait-caption' name='wait-caption' style='font-size: 24;text-align: center;'></span></center>
</div>

<header class="navbar navbar-fixed-top" id="main-navbar" style="padding: 0px">
	<div class="navbar-inner" style="width: 100%">
		<div class="">
			<table width='100%'>
				<tr>
					<td width='48px'><a class="logo" href="/dashboard" title='Home'><img alt="<%=CS_HOME_WEBSITE%>_logo" src="<%=CS_HOME_FAVICON%>" width='96px'></a></td>
					
					<td style="text-align: right" width="auto">
						<button id="darkModeButton">
						<div class="ball"></div> Dark Mode
						</button>
					</td>
	

					<td id='services'>
						<span style='color: White;font-family: Arial;font-size: 12px;'>
							<%
							services = BlackStack::Extensions::extensions.select { |e| e.show_in_top_bar == true && !e.services_section.nil? }
							sections = services.map { |e| e.services_section }.uniq.sort
							# show list of services, only if there are more than 1 service configured.
							if services.size > 1
							%>
							<ul class="nav">
								<li class="dropdown">
									<a href="#" class="dropdown-toggle" data-toggle="dropdown">
										<i class='icon-coffee'></i> <span id='service_name'><%=@service.to_s.capitalize.encode_html%> <i class="icon-chevron-down"></span></i>  
									</a>
									<ul class="dropdown-menu" style='width:250px;'>
										<li><a href="/dashboard"><i class="icon-home"></i> Home</a></li>
										<%
										# getting full list of sections
										sections.each { |section|
											%>
											<li class="nav-header"><i class="icon-coffee"></i> <%=section.encode_html%></li>
											<%
											BlackStack::Extensions::extensions.select { |e| e.show_in_top_bar == true && e.services_section == section }.each do |e|
												%>
												<li>
													<a href="/<%=e.name.downcase.encode_html%>?service=<%=e.name.downcase.encode_html%>">
														<%=e.name.capitalize.encode_html%>
														<br/>
														<span style='font-size: 10px;color:gray;'><%=e.description.encode_html%></span>
													</a>
												</li>
												<%
											end # each
										}
										%>
									</ul>
								</li>
							</ul>
							<%
							end # if BlackStack::Extensions::extensions.select { |e| e.show_in_top_bar == true && !e.services_section.nil? }.size > 0
							%>
						</span>					
					</td>

					<%
					if BlackStack::Extensions.exists?('i2p')
						BlackStack::I2P::services_descriptor.select { |h| h[:show_in_top_bar] }.each { |h|
						%>
						<td align='left' style='text-align: left:' width='250px'>
							<a href="/plans"> 
								<span>
									<%
									if h[:mode] == BlackStack::I2P::MODE_CREDITS
									%>
									<span id='credits' class='label label-blue'><%=account.credits(h[:code]).to_i.to_label%></span> <span style='color:white;'><%=h[:unit_name].to_s%></span> 
									<%
									elsif h[:mode] == BlackStack::I2P::MODE_AMOUNT
									%>
									<span id='amount' class='label label-blue'>$<%=account.balance(h[:code]).to_f.round(2).to_label%></span> <span style='color:white;'></span> 
									<%
									end # if h[:mode] == BlackStack::I2P::MODE_AMOUNT
									%>
								</span>
							</a>
							<a href="/plans" class='btn btn-mini btn-green' style='margin-top:0;'><i class='icon-plus'></i></a>
						</td>
						<%
						}
					end
					%>
					
					<td align='right' style='text-align: right;' width='auto' >
						<%
						# Badge: SysOwner
						if !account.api_key.nil?
							if account.sysowner?
							%>
							<span class='badge badge-pink' title='SYSOWNER: You Are Running the Webserver using this API-KEY for validating the API-CALLs.'><i class='icon-key'></i> SysOwner</span>
							<%
							end # if BlackStack::MySaaS::api_key.to_guid == account.api_key.to_guid
						end # if !account.api_key.nil?

						# Badge: Premium Account
						if BlackStack::Extensions.exists?(:i2p)
							if account.premium?
								%>
								<span class='badge badge-green' title='You paid for credits.'><i class='icon-star'></i> Premium</span>
								<%
							else
								%>
								<span class='badge badge-gray' title='Subscribe a Plan & Unlock Premium Features.'><a href='/plans' style='color:black;'><i class='icon-star'></i> Free Accoount</a></span>
								<%
							end
						end
						%>
	
						<a href="mailto:<%=HELPDESK_EMAIL%>?subject=I Need Help" style='color:white;'>
							<span>
								<span class='badge badge-blue'><i class="icon-question"></i> <span id='email_support'>Email Support</span></span>
							</span>
						</a>
					</td>

					<td align='right' style='text-align: right:' width='54px'>			
						<ul class="nav pull-right">
							<li class="dropdown">
								<a href="#" class="dropdown-toggle usermenu" data-toggle="dropdown">
									<img alt="Avatar" src="<%=("https://www.gravatar.com/avatar/" + Digest::MD5.hexdigest(user.email.strip.downcase)).encode_html%>">
									<!--
									<span>&nbsp;&nbsp;<%=login.user.account.name.encode_html%></span>
									-->
								</a>
								<ul class="dropdown-menu">
									<li class="nav-header">User Details</li>
									<li><a><b>Email:</b> <%=user.email.encode_html%></a></li>
									<li><a><b>Company:</b> <%=account.name.to_s.encode_html%></a></li>								
									<%
									if !e.nil? # I am in a service
										%>
										<li class="divider"></li>
										<li class="nav-header"><%=e.name.to_s.encode_html%></li>
										<%
										e.leftbar_icons.each { |i|
											%>
											<li>
												<a href="/<%=e.name.downcase.to_s.encode_html%>/<%=i.screen.to_s.downcase.encode_html%>"><%=i.label.encode_html%> <span class="icon-<%=i.icon.to_s%>"></span></a>
											</li>
											<%
										}
									end
									%>					
									<li class="divider"></li>
									<li class="nav-header">Options</li>
									<li>
										<a href="/settings/dashboard"><i class='icon-cog'></i> Settings</a>
									</li>
									<li>
										<%
										if SLAVE
										%>
											<a href="/logout"><i class='icon-signout'></i>Close</a>
										<%
										else
										%>
											<a href="/logout"><i class='icon-signout'></i>Sign Out</a>
										<%
										end
										%>
									</li>
								</ul>
							</li>
						</ul>
					</td>
				</tr>
			</table>
		</div>
	</div>
</header>

<script>
	// activate / deactivate dark-mode.
	function setDarkMode(enable) {
		const body = document.body;
		const button = document.getElementById("darkModeButton");

		if (enable) {
			body.classList.add("dark-mode");
			button.innerHTML = '<div class="ball"></div> Light Mode'; // Ball is now inside the button while changing text
		} else {
			body.classList.remove("dark-mode");
			button.innerHTML = '<div class="ball"></div> Dark Mode'; // Ball is now inside the button while changing text
		}
	}

	// setup the position of the panels,
	// depending of which ones are visible.
	function adjustLayout() {
	    const sidebar = document.getElementById("pool1");
		const chatSection = document.getElementById("pool2");
		const thirdSection = document.getElementById("pool3");

		if (sidebar == null) {
			if (
				chatSection.style.display === "none" ||
				window.getComputedStyle(chatSection).display === "none"
			) {
				// If pool2 is hidden, make pool3 take full width
				thirdSection.style.width = "100%";
				thirdSection.style.display = "block"; // Ensure pool3 is visible
			} else if (
				thirdSection.style.display === "none" ||
				window.getComputedStyle(thirdSection).display === "none"
			) {
				// If pool3 is hidden, make pool2 take full width
				chatSection.style.width = "100%";
				chatSection.style.display = "block"; // Ensure pool2 is visible
			} else {
				// Adjust widths for both pool2 and pool3 when both are visible
				chatSection.style.width = "70%";
				thirdSection.style.width = "30%";

				// Ensure both sections are visible
				chatSection.style.display = "block";
				thirdSection.style.display = "block";
			}
		} else {
			if (
				sidebar.style.display !== "none" &&
				chatSection.style.display !== "none" &&
				thirdSection.style.display !== "none"
			) {
				sidebar.style.width = "25%";
				chatSection.style.width = "50%";
				thirdSection.style.width = "25%";
			} else if (
				sidebar.style.display !== "none" &&
				chatSection.style.display !== "none"
			) {
				sidebar.style.width = "30%";
				chatSection.style.width = "70%";
			} else if (
				chatSection.style.display !== "none" &&
				thirdSection.style.display !== "none"
			) {
				chatSection.style.width = "70%";
				thirdSection.style.width = "30%";
			} else if (
				sidebar.style.display !== "none" &&
				thirdSection.style.display !== "none"
			) {
				sidebar.style.width = "50%";
				thirdSection.style.width = "50%";
			} else {
				if (sidebar.style.display !== "none") sidebar.style.width = "100%";
				if (chatSection.style.display !== "none") chatSection.style.width = "100%";
				if (thirdSection.style.display !== "none") thirdSection.style.width = "100%";
			}
		}
	}

	// collapse/close a panael
	function closePanel(panelId) {
		let o = document.getElementById(panelId);
		if (o) {
			o.style.display = "none";
			adjustLayout();
		}
	}

	// expand/open a panel.
	// if it is a mobile screen, only one panel can be shown at a time.
	function openPanel(panelId) {
		let o = document.getElementById(panelId);
		if (o) {
			o.style.display = "block";
			adjustLayout();
		}

		// in a mobile screen, only one panel can be shown at a time.
	    let panel = document.getElementById(panelId);
	    if (panel==null) panel = document.getElementById("pool2");
		const pool1 = document.getElementById("pool1");
		const pool2 = document.getElementById("pool2");
		const pool3 = document.getElementById("pool3");

		if (pool1 == null) {
			if (window.matchMedia("(max-width: 768px)").matches) {
				pool2.style.display = "none";
				pool3.style.display = "none";
				panel.style.display = "block";
			}
		} else {
			if (window.matchMedia("(max-width: 768px)").matches) {
				pool1.style.display = "none";
				pool2.style.display = "none";
				pool3.style.display = "none";		
				panel.style.display = "block";
			}
		}
	}

	// set class `.fa-solid .fa-arrow-right` or `.fa-solid .fa-arrow-left` to the `i` element inside each button,
	// depending on their pool is expanded or collapsed.
	function setButtons() {
		const pool1 = document.getElementById("pool1");
		const pool2 = document.getElementById("pool2");
		const pool3 = document.getElementById("pool3");

		// Button of pool1
		const btn1 = document.getElementById('arrow-right-1');

		// Buttons of pool2
		const btn2 = document.getElementById('arrow-left-1');
		const btn3 = document.getElementById('arrow-right-2');

		// Button of pool3
		const btn4 = document.getElementById('arrow-left-2');

		// Helper function to update icon classes
		function updateIcon(button, showLeft) {
			if (button==null) return;
			
			// behaviour is differnt into a mobile screen
			if (window.matchMedia("(max-width: 768px)").matches) {
				showLeft = !showLeft
			}

			const icon = button.querySelector('i');
			if (icon) {
				if (showLeft) {
					icon.classList.remove("fa-arrow-right");
					icon.classList.add("fa-arrow-left");
				} else {
					icon.classList.remove("fa-arrow-left");
					icon.classList.add("fa-arrow-right");
				}
			}
		}

		// Set icon for pool2's left-side button if pool1 exists
		if (pool1) {
			const isPool1Visible = window.getComputedStyle(pool1).display !== "none";
			updateIcon(btn2, isPool1Visible);
		}

		// Set icons for pool1's button and pool3's button if pool2 exists
		if (pool2) {
			const isPool2Visible = window.getComputedStyle(pool2).display !== "none";
			updateIcon(btn1, !isPool2Visible);
			updateIcon(btn4, isPool2Visible);
		}

		// Set icon for pool2's right-side button if pool3 exists
		if (pool3) {
			const isPool3Visible = window.getComputedStyle(pool3).display !== "none";
			updateIcon(btn3, !isPool3Visible);
		}
	}
	
	// switch arrow buttons
	function togglePanel(panelId, arrowID) {
		const panel = document.getElementById(panelId);
		if (panel==null) return;
		const panelVisible = panel.style.display !== "none";
		if (!panelVisible) {
			openPanel(panelId);
		} else {
			closePanel(panelId);
		}
		setButtons();
		adjustLayout();
	}
	
	// Unselect all the tabs and content divs.
	// Select the right tab and content div.
	function chooseTab(tabId) {
		// Select the button with the specific data-tab attribute
		var $button = $(`button[data-tab='${tabId}']`);
		
		// Find the closest ancestor with the class 'tab-container'
		var $tabContainer = $button.closest(".tab-container");
		
		// Unselect all tab buttons by removing the 'active' class
		$tabContainer.find(".tab-button").removeClass("active");
		
		// Select the clicked tab button by adding the 'active' class
		$button.addClass("active");
		
		// Hide all tab content sections by removing the 'active' class
		$tabContainer.find(".tab-content").removeClass("active");
		
		// Show the corresponding tab content by adding the 'active' class
		$tabContainer.find(`#${tabId}`).addClass("active");
	}

	// Automatically collapse sections on small screens
	function checkWindowSize() {
		if ($(window).width() <= 1200) {
			// Ensure pool2 and pool3 have proper widths
			$("#pool2").css("width", "70%");
			$("#pool3").css("width", "30%");
		} else {
			// Reset to default behavior for larger screens
			$("#pool2").css("width", "70%"); // or any other desired width
			$("#pool3").css("width", "30%");
		}
	}

	// layout events: darkmode, collapse/expand panels, choose tab
	$(document).ready(function() {
		// setup preference dark mode
		setDarkMode('<%=dark%>' == 'yes');

		// choose the right tab
		chooseTab('<%=tab%>');

		// expand/collapse panel1
		if ('<%=pool1%>' == 'expanded') { openPanel('pool1'); } else { closePanel('pool1'); }
		if ('<%=pool2%>' == 'expanded') { openPanel('pool2'); } else { closePanel('pool2'); }
		if ('<%=pool3%>' == 'expanded') { openPanel('pool3'); } else { closePanel('pool3'); }
		//setButtons();
		togglePanel('pool1');
		adjustLayout();

		// Check window size on load and resize
		checkWindowSize();
		$(window).resize(function () {
		  	checkWindowSize();
		});
		adjustLayout();

		// toggle dark-mode when user click on #darkModeButton
		document
		.getElementById("darkModeButton")
		.addEventListener("click", function () {
			document.body.classList.toggle("dark-mode");

			// Change the button text based on the mode
			if (document.body.classList.contains("dark-mode")) {
				setDarkMode(true);
			} else {
				setDarkMode(false);
			}
		});

		// 
		$(".tab-button").click(function () {
			const button = this;
			const tabId = button.getAttribute("data-tab");
			chooseTab(tabId);
		});

	});
</script>