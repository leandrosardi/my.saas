<%
begin
    object = params[:object]
    cls = BlackStack::API.classes[object.to_sym]
    page = @body['page'].to_i
    limit = @body['limit'].to_i    
    filters = @body['filters']
    
    # sysowner must provide the id_account for getting a page of results
    a = nil
    if @account.sysowner?
        raise 'If you are the sysowner, the parameter id_account is mandatory for getting a page of results.' if @body['id_account'].nil?
        a = BlackStack::MySaaS::Account.where(:id=>@body['id_account']).first
        raise "Account (#{@body['id_account'].to_s}) not found." if a.nil?
    # for non sysowner it is assigned to his account
    else # !@account.sysowner?
        a = @account.id
    end

    # getting the dataset
    ds = cls.page(a, page: page, limit: limit, filters: filters)
    
    #n = ds.count
    arr = ds.limit(limit).offset((page-1)*limit).order(:create_time).all

    #@return_message['total'] = n
    @return_message['results'] = arr.map { |o| o.to_h }
rescue Exception => e
    @return_message['status'] = @body['backtrace'] ? e.to_console : e.message
end
return @return_message.to_json
%>