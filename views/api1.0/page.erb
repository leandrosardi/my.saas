<%
begin
    object = params[:object]
    cls = BlackStack::API.classes[object.to_sym]
    page = (@body['page'] || 1).to_i
    limit = (@body['limit'] || 25).to_i
    filters = @body['filters'] || {}
    order = @body['order'] || 'id'
    asc = @body['asc'].nil? ? true : @body['asc']
    promiscuous = @body['promiscuous']

    # sysowner must provide the id_account for getting a page of results
    a = nil
    if @account.sysowner?
        raise 'If you are the sysowner, either the parameter id_account is mandatory for getting a page of results, or you have to set the promiscuous to grab records of any account.' if @body['id_account'].nil? && !promiscuous
        if !promiscuous
            a = BlackStack::MySaaS::Account.where(:id=>@body['id_account']).first
            raise "Account (#{@body['id_account'].to_s}) not found." if a.nil?
        end
    # for non sysowner it is assigned to his account
    else # !@account.sysowner?
        a = @account
    end

    # getting the dataset
    ds = cls.page(@account, page: page, limit: limit, filters: filters)
    return_message['count'] = ds.count
    ds = asc ? ds.order(order.to_sym) : ds.order(Sequel.desc(order.to_sym))
    ds = ds.limit(limit).offset((page-1)*limit)

    #n = ds.count
    arr = ds.all

    #@return_message['total'] = n
    @return_message['results'] = arr.map { |o| o.to_h }
rescue Exception => e
    @return_message['status'] = @body['backtrace'] ? e.to_console : e.message
end
return @return_message.to_json
%>
