dataJs = {
    // events when the user add or remove a value
    events: {},

    // store the hash definition of each component created here
    components: {},

    version: '1.0.0',

    // generate a random UUID
    //
    // private method
    // it shouldn't be called by the user
    //
    //
    uuidv4: function() {
        return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
          (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
        );
    },

    // handle events of item
    // 
    // private method
    // it shouldn't be called by the user
    // 
    // 
    apply_item_behaviour: function(parent_items, id_item) {
        // get the tr
        tr = $(parent_items).find("tr[data-id-item='"+id_item+"']");
        // strikethrough item when click on .btn-strikethrough-item button
        $(tr).find('.btn-strikethrough-item').click(function() {
            dataJs.on_strikethrough_item(parent_items, $(this).attr('data-id-item'));
        });

        // copy to clipboard when click on .btn-copy-value button
        $(tr).find('.btn-copy-value').click(function() {
            // get id_lead
            let id_item = $(this).attr('data-id-item');
            // get the tr.contact-info-item with the data-id-item attribute
            let tr = $("tr.contact-info-item[data-id-item='"+id_item+"']");
            // get the td.data-value
            let td = $(tr).find("td.data-value");
            // get the value
            let value = $(td).text();
            // copy to clipboard
            navigator.clipboard.writeText(value);
            // change from icon-copy to icon-ok
            $(this).find('i').removeClass('icon-copy').addClass('icon-ok');
            // wait 2 seconds and rollback
            setTimeout(function() {
                $(parent_items).find('.btn-copy-value').find('i').removeClass('icon-ok').addClass('icon-copy');
            }, 1000);
        });

        // remove item when click on .btn-remove-item button
        // 
        // private method
        // it shouldn't be called by the user
        // 
        // 
        $(tr).find('.btn-remove-item').click(function() {
            dataJs.on_remove_item(parent_items, $(this).attr('data-id-item'));
        });
    },

    enable_add_button: function(parent_buttons) {
        let field = $(parent_buttons).find('.add-data-field');
        let button = $(parent_buttons).find('.add-data-submit');
        $(field).removeAttr('disabled');
        $(button).removeAttr('disabled');
    },

    disable_add_button: function(parent_buttons) {
        let field = $(parent_buttons).find('.add-data-field');
        let button = $(parent_buttons).find('.add-data-submit');
        $(field).attr('disabled', 'disabled')
        $(button).attr('disabled', 'disabled');
    },

    // enable .add-data-submit button when .add-data-value is not empty
    // return true if the value is not empty
    // 
    // private method
    // it shouldn't be called by the user
    // 
    // 
    toggle_add_button: function(parent_buttons) {
        let input = $(parent_buttons).find('.add-data-value');
        let button = $(parent_buttons).find('.add-data-submit');
        let idate = $(parent_buttons).find('.add-data-date');
        let can_add = false;
        // if idate exists, then check if it's empty
        if (idate.length > 0) {
            can_add = $(idate).val().trim() != '' && $(input).val().trim() != '';
        } else {
            can_add = $(input).val().trim() != '';
        }
        // 
        if (can_add) {
            $(button).removeAttr('disabled');
            return true;
        } else {
            $(button).attr('disabled', 'disabled');
            return false;
        }
    },

    // add a new button, about a new type of data to add to the list of items
    //
    //
    add_button: function(parent_buttons, v) {
        // get the id_lead
        let id_lead = $(parent_buttons).attr('data-id-lead');
        // get the .buttons element inside the parent element
        let buttons = $(parent_buttons).find('.buttons');
        // create the button element
        let b = document.createElement('button');
        b.setAttribute('class', 'btn btn-link add-data');
        b.setAttribute('data-id-lead', id_lead);
        b.setAttribute('data-type', v.code);
        // create the icon element
        let i = document.createElement('i');
        i.setAttribute('class', 'icon-'+v.icon);
        i.setAttribute('title', v.title);
        // add the icon to the button
        b.appendChild(i);
        // add the button to the buttons element
        $(buttons).append(b);
    },

    // add a new item to the list of items
    //
    //
    add_item: function(parent_items, v) {
        // restore the hash description from the components
        let h = dataJs.components[parent_items.id];
        let buttons = h.buttons;
        let trash_enabled = h.trash_enabled == null ? false : h.trash_enabled;
        let copy_enabled = h.copy_enabled == null ? false : h.copy_enabled;
        let strikethrough_enabled = h.strikethrough_enabled == null ? false : h.strikethrough_enabled;

        // add item to component
        dataJs.components[parent_items.id].items.push(v);

        // get the id_lead
        let id_lead = $(parent_items).attr('data-id-lead');
        let table = $(parent_items).find('.datasjs-items');
        // create the child span
        let tr = document.createElement('tr');
        let td = null; // will create many TDs
        tr.setAttribute('data-id-lead', id_lead);
        tr.setAttribute('data-id-item', v.id);
        tr.setAttribute('class', 'data-item');
        tr.setAttribute('valign', 'top');

        // find the element into the array h.buttons with code == v.button_code
        let button = buttons.find(function(element) {
            return element.code == v.button_code;
        });

        // setup span class email or phone, depending on the type
        tr.setAttribute('class', 'contact-info-item '+button.name);
            
        // set remove button
        if (trash_enabled) {
            let td = document.createElement('td');
            td.setAttribute('valign', 'top');
            let remove = document.createElement('button');
            td.setAttribute('width', '32px');
            remove.setAttribute('class', 'btn btn-link btn-remove-item');
            remove.setAttribute('data-id-lead', id_lead);
            remove.setAttribute('data-id-item', v.id);
            $(remove).html('<i class="icon-trash"></i>');
            td.appendChild(remove);
            tr.appendChild(td);
        }

        // create icon with icon-envelope or icon-phone, depending on the type
        td = document.createElement('td');
        td.setAttribute('width', '32px');
        td.setAttribute('valign', 'top');
        let btn = document.createElement('button');
        btn.setAttribute('class', 'btn btn-link');
        btn.setAttribute('disabled', 'disabled');
        let icon = document.createElement('i');
        icon.setAttribute('class', 'icon-'+button.icon);
        btn.appendChild(icon);
        td.appendChild(btn);
        tr.appendChild(td);

        // create anchor with href mailto or tel, depending on the type
        // set strikethrough
        td = document.createElement('td');
        td.setAttribute('class', 'data-value');
        td.setAttribute('width', 'auto');
        td.setAttribute('valign', 'top');        
        if (button.link != null) {
            // remove initial 'https://' from the value
            if (v.value.toString().indexOf('https://') == 0) {
                v.value = v.value.toString().substr(8);
            }
            // remove initial 'http://' from the value
            if (v.value.toString().indexOf('http://') == 0) {
                v.value = v.value.toString().substr(7);
            }
            // add '//' to v.value if button.link is 'http' or 'https'
            // but save the original value in the caption varaible, to show it in the link text.
            let caption = v.value;
            if ( button.link == 'http' || button.link == 'https' ) {
                v.value = '//' + v.value;
            }
            
            // 
            let a = document.createElement('a');
            a.setAttribute('href', button.link+':'+v.value);
            a.setAttribute('target', '_window');
            a.innerHTML = caption;
            td.appendChild(a);
        } else {
            let txt = document.createElement('span');;
            txt.innerHTML = v.value;
            td.appendChild(txt);
        }
        tr.appendChild(td);

        // show the date of this task
        if (h.show_date) {
            td = document.createElement('td');
            td.setAttribute('width', '76px');
            td.setAttribute('valign', 'middle');
            td.setAttribute('align', 'right');
            td.setAttribute('style', 'color:gray');
            $(td).html(v.date);
            tr.appendChild(td);
        }

        // add the copy button
        if (copy_enabled) {
            td = document.createElement('td');
            td.setAttribute('width', '32px');
            td.setAttribute('valign', 'top');
            let copy = document.createElement('button');
            copy.setAttribute('class', 'btn btn-link btn-copy-value');
            copy.setAttribute('data-id-lead', id_lead);
            copy.setAttribute('data-id-item', v.id);
            $(copy).html('<i class="icon-copy"></i>');
            td.appendChild(copy);
            tr.appendChild(td);
        }

        // add the copy button
        if (strikethrough_enabled) {
            td = document.createElement('td');
            td.setAttribute('width', '32px');
            td.setAttribute('valign', 'top');
            let strikethrough = document.createElement('button');
            strikethrough.setAttribute('class', 'btn btn-link btn-strikethrough-item');
            strikethrough.setAttribute('data-id-lead', id_lead);
            strikethrough.setAttribute('data-id-item', v.id);
            $(strikethrough).html('<i class="icon-ok"></i>');
            td.appendChild(strikethrough);
            tr.appendChild(td);
        }

        // add item to the table
        table.append(tr);

        // apply strikethrough
        if (v.strikethrough) {
            //$(td).addClass('strikethrough');
            //$(td).css('text-decoration', 'line-through');
            dataJs.set_strikethrough(parent_items, v.id, true)
        }

        // setup code for all events
        dataJs.apply_item_behaviour(parent_items, v.id);
    },

    // remove specific item from the table
    // 
    // 
    remove_item: function(parent_items, item_id) {
        // get the element tr.contact-info-item phone with the same id of the item
        let tr = $(parent_items).find("tr.contact-info-item[data-id-item='"+item_id+"']");
        // remove the element
        $(tr).remove();
    },

    set_item_opacity: function(parent_items, item_id, opacity) {
        // get the element tr.contact-info-item phone with the same id of the item
        let tr = $(parent_items).find("tr.contact-info-item[data-id-item='"+item_id+"']");
        // change li opacity
        $(tr).css('opacity', opacity);
    },

    // remove all items from the table
    // 
    // 
    remove_all: function(parent_items, item_id) {
        // get the element tr.contact-info-item phone with the same id of the item
        let tr = $(parent_items).find("tr.contact-info-item");
        // remove items from component descriptor
        this.components[parent_items.id].items = []
        // remove the element
        $(tr).remove();
    },

    // activate/deactivate the strikethrough for the item
    // 
    // 
    set_strikethrough: function(parent_items, item_id, b) {
        let id_lead = $(parent_items).attr('data-id-lead');
        // get the element tr.contact-info-item phone with the same id of the item
        let tr = $(parent_items).find("tr.contact-info-item[data-id-item='"+item_id+"']");
        // get the td.data-value element with the same id of the item
        let td = $(tr).find("td.data-value");
        // change the style of the td element
        if (b) {
            $(td).addClass('strikethrough'); 
            $(td).css('text-decoration', 'line-through');
        } else {
            $(td).removeClass('strikethrough'); 
            $(td).css('text-decoration', 'none');
        }
    },

    // return true if strikethrough is activated for the item
    // 
    // 
    is_strikethrough: function(parent_items, item_id, b) {
        let id_lead = $(parent_items).attr('data-id-lead');
        // get the element tr.contact-info-item phone with the same id of the item
        let tr = $(parent_items).find("tr.contact-info-item[data-id-item='"+item_id+"']");
        // get the td.data-value element with the same id of the item
        let td = $(tr).find("td.data-value");
        // change the style of the td element
        return $(td).hasClass('strikethrough'); 
    },
    
    // hide the form to add data
    // 
    // 
    hide_form: function(parent_buttons) {
        let form = $(parent_buttons).find('.add-data-div');
        $(form).hide();
    },

    // show the form to add data
    // 
    // 
    show_form: function(parent_buttons, type) {
        let button = $(parent_buttons).find('.add-data');
        let id_lead = $(button).attr('data-id-lead');
        let form = $(parent_buttons).find('.add-data-div');
        $(form).find('.add-data-type').val(type);
        $(form).show();
        setTimeout(function() {
            // if exists .add-data-date
            if ($(form).find('.add-data-date').length > 0) {
                // set focus on .add-data-date
                $(form).find('.add-data-date').focus();
            } else {
                $(form).find('.add-data-value').focus();
            }
        }, 200);
        dataJs.toggle_add_button(parent_buttons);
    },

    // get the value written in .add-data-value
    // 
    // 
    get_date: function(parent_buttons) {
        let id_lead = $(parent_buttons).attr('data-id-lead');
        let form = $(parent_buttons).find('.add-data-div');
        let value = $(form).find('.add-data-date').val();
        return value;
    },

    // get the value written in .add-data-value
    // 
    // 
    get_value: function(parent_buttons) {
        let id_lead = $(parent_buttons).attr('data-id-lead');
        let form = $(parent_buttons).find('.add-data-div');
        let value = $(form).find('.add-data-value').val();
        return value;
    },

    // get the type of the value wrtten in .add-data-value
    // 
    // 
    get_type: function(parent_buttons) {
        let id_lead = $(parent_buttons).attr('data-id-lead');
        let form = $(parent_buttons).find('.add-data-div');
        let type = $(form).find('.add-data-type').val();
        return type;
    },
    
    // default function to trigger when the user adds a value
    // 
    // 
    on_add_item: function(parent_buttons, parent_items) {
        let id_lead = $(parent_buttons).attr('data-id-lead');
        let type = dataJs.get_type(parent_buttons);
        let value = dataJs.get_value(parent_buttons);
        let date = dataJs.get_date(parent_buttons);
        // if it is defined the function on_expand
        if (dataJs.events[parent_items.id+".on_add_item"]) {
            // call the function
            dataJs.events[parent_items.id+".on_add_item"](type, value);
        } else {
            // add the data
            v = {
                id: dataJs.uuidv4(),
                button_code: type,
                value: value,
                date: date
            };
            dataJs.add_item(parent_items, v);
            // hide the form
            dataJs.hide_form(parent_buttons);    
        }
    },

    // default function to trigger when the user removes an item
    // 
    // 
    on_remove_item: function(parent_items, item_id) {
        if (dataJs.events[parent_items.id+".on_remove_item"]) {
            // call the function
            dataJs.events[parent_items.id+".on_remove_item"](item_id);
        } else {
            dataJs.remove_item(parent_items, item_id);
        }
    },

    // default function to trigger when the user strikethrough a value
    // 
    // 
    on_strikethrough_item: function(parent_items, item_id) {
        if (dataJs.events[parent_items.id+".on_strikethrough_item"]) {
            // call the function
            dataJs.events[parent_items.id+".on_strikethrough_item"](item_id);
        } else {
            if (dataJs.is_strikethrough(parent_items, item_id)) {
                dataJs.set_strikethrough(parent_items, item_id, false);
            } else {
                dataJs.set_strikethrough(parent_items, item_id, true);
            }
        }
    },

    // default function to trigger when the user clicks on the add button

    
    get_id: function(parent_buttons) {
        return $(parent_buttons).attr('data-id-lead');
    },

    set_id: function(parent_buttons, parent_items, id) {
        $(parent_buttons).attr('data-id-lead', id);
        $(parent_items).attr('data-id-lead', id);
    },

    // get the caption of the buttons component


    // draw both components: buttons and items
    // 
    // 
    draw: function(parent_buttons, parent_items, h) {
        let r = "";
        parent_buttons = parent_buttons[0];
        parent_items = parent_items[0];

        // if there is not a key 'items', create it as an array
        if (!h.items) {
            h.items = [];
        }

        // save the component
        this.components[parent_items.id] = h;

        // set the data-id-lead attribute
        $(parent_buttons).attr('data-id-lead', h.id);
        $(parent_items).attr('data-id-lead', h.id);

        // draw the buttons component
        r += "<div class='datasjs-buttons'> ";
        r += "  <span>"+h.caption+": </span> ";
        r += "  <span class='buttons'></span> ";
        r += "  <!-- form to add data --> ";
        r += "  <div class='add-data-div' data-id-lead='"+h.id+"'> ";
        r += "      <input type='hidden' class='input-block-level add-data-type' data-id-lead='"+h.id+"' value='' /> ";

        if (h.calendar === true) {
            r += "      <input type='date' class='input-block-level add-data-date add-data-field' data-id-lead='"+h.id+"' value='' /> ";
        }

        if (h.textarea === true) {
            r += "      <textarea class='input-block-level add-data-value add-data-field' data-id-lead='"+h.id+"' rows=3></textarea> ";
            r += "      <span style='color:gray;'>Use SHIFT+ENTER tp start a new line.</span> ";
        } else {
            r += "      <input type='text' class='input-block-level add-data-value add-data-field' data-id-lead='"+h.id+"' value='' /> ";
        }
        
        r += "      <br/> ";
        r += "      <button class='btn btn-link add-data-submit' data-id-lead='"+h.id+"'><i class='icon-ok'></i></button> ";
        r += "      <button class='btn btn-link add-data-cancel' data-id-lead='"+h.id+"'><i class='icon-remove'></i></button> ";
        r += "  </div> ";
        r += "</div> ";
        // create the HTML entity
        let o = $.parseHTML(r);
        // hide .add-data-div
        $(o).find('.add-data-div').hide();
        // add the widgets to the parent
        $(parent_buttons).append(o);
        // add the buttons
        $.each(h['buttons'], function(i, v) {
            dataJs.add_button(parent_buttons, v);
        });

        // draw the items component
        table = document.createElement('table');
        table.setAttribute('data-id-lead', h.id);
        table.setAttribute('class', 'datasjs-items')
        table.setAttribute('style', 'table-layout: fixed; width: 100%;');
        // add items component to the parent
        $(parent_items).append(table);
        // iterate the array of items
        $.each(h['items'], function(i, v) {
            dataJs.add_item(parent_items, v);
        });

        // events
        // store function to trigger when the user adds a value
        if (h['on_add_item'] != null) {
            dataJs.events[parent_items.id+".on_add_item"] = h['on_add_item'];
        }
        if (h['on_remove_item'] != null) {
            dataJs.events[parent_items.id+".on_remove_item"] = h['on_remove_item'];
        }
        if (h['on_strikethrough_item'] != null) {
            dataJs.events[parent_items.id+".on_strikethrough_item"] = h['on_strikethrough_item'];
        }

        // select all text of .add-data-value when focus on .add-data-value
        $(parent_buttons).find('.add-data-value').focus(function() {
            this.select();
        });

        // show .add-data-div when click on .add-data button
        $(parent_buttons).find('.add-data').click(function() {
            type = $(this).attr('data-type');
            // show the form
            dataJs.show_form(parent_buttons, type);
        });

        // hide .add-data-div when click on .add-data-cancel button
        $(parent_buttons).find('.add-data-cancel').click(function() {
            // hide the form
            dataJs.hide_form(parent_buttons);
        });

        // hide .add-data-div when press ESCAPE on parent_buttons
        $(parent_buttons).keyup(function(e) {
            if (e.keyCode == 27) {
                dataJs.hide_form(parent_buttons);
            }
        });

        // add item when click on .add-data-submit button
        $(parent_buttons).find('.add-data-submit').click(function() {
            dataJs.on_add_item(parent_buttons, parent_items);
        });

        // enable .add-data-submit button when .add-data-value is not empty
        // if .add-data-submit is enabled, add item when press ENTER on .add-data-value
        $(parent_buttons).find('.add-data-field').keyup(function(e) {
            if (dataJs.toggle_add_button(parent_buttons)) {
                if (h.textarea !== true && e.keyCode == 13) {
                    dataJs.on_add_item(parent_buttons, parent_items);
                } 
                else if (h.textarea === true && e.keyCode == 13 && !e.shiftKey) {
                    dataJs.on_add_item(parent_buttons, parent_items);
                }
                else if (h.textarea === true && e.keyCode == 13 && e.shiftKey) {
                    // force ENTER
                    //$(this).val($(this).val() + "\n");
                }
            }
        });
    },
};