reactJs = {
    // array of defined polls
    polls: [],
    
    // play/pause react auto-update
    auto: true,

    // buffer original state of all elements
    original_texts: {},
    original_attrs: {},

	// return the version if this selectRowsJs library.
    version: function() {
        return '1.0.1';
    },

    play: function() {
        reactJs.auto = true;
        // iterate all polls, and start them.
        for (var i = 0; i < polls.length; i++) {
            poll = polls[i];
            reactJs.poll(poll);
        }
    },

    pause: function() {
        reactJs.auto = false;
    },

    // call the poll function for each poll in the array
    run: function(param_auto=false) {
        // iterate all polls
        for (var i = 0; i < reactJs.polls.length; i++) {
            h = reactJs.polls[i];
            reactJs.poll(h, param_auto);
        }
    },



    poll: function(h, param_auto=false) {
        data = {};
        if ( h.data != null ) {
            data = h.data();				
        };

        // if defined, call the callback function before_poll.
        if (h.before_poll != undefined) { 
            h.before_poll(h);
        }

        $.ajax({
            url: h.url,
            method: h.method,
            // parameters
            data: data,
            success: function(data) {                
                // get json
                json = JSON.parse(data);
                
                // iterate the keys into the hash original_texts
                for (var id in reactJs.original_texts) {
                    // get the element
                    e = document.getElementById(id);

                    // get the original text of the element
//console.log('id='+id);
                    let t = reactJs.original_texts[id];
//console.log('t='+t);
                    
                    // get all the substrings within the original text, that are between { and }
                    matches = t.match(new RegExp('{'+h.name+'([^}]+)}', 'g'));
                    if (matches != null) {
                        // iterate all substrings
                        for (var i = 0; i < matches.length; i++) {
                            let match = matches[i];
                            // if the match starts with the name of the poll
                            if (match.startsWith('{'+h.name)) {
                                // if the match includes an array-specifier like '{sp500.stocks[].value}', where 'sp500' is the name of the poll.
                                if (match.includes('[]')) {
                                    // get the name of the variable
                                    x = match.substring(1, match.indexOf('[]'));
                                    // get the array
                                    a = eval('json.'+x.replace(h.name+'.', ''));
                                    // get the name of the variable within the array
                                    y = match.substring(match.indexOf('[]')+3, match.length-1);
                                    // iterate all elements of the array
                                    for (var j = 0; j < a.length; j++) {
                                        // get the value of the variable
                                        let i = $(e).attr('react-index');
                                        if (i==j) {
                                            if ( j<eval('json.'+x.replace(h.name+'.', '')+'.length') ) {
                                                // set display for the element with react-collection=h.name and react-index=j
                                                o = $("*[react-collection='"+h.name+"."+x+"'][react-index='"+j+"']")
                                                // if o is displayed
                                                if ($(o).is(":hidden")) {
                                                    // show the element
                                                    o.show();
                                                    // if defined, call the callback function on_show_collectionable.
                                                    if (h.on_show_collectionable != undefined) { 
                                                        h.on_show_collectionable(json, o);
                                                    }    
                                                }
                                                // replace all occurrences of {sp500.stocks[].value} with the value of sp500.stocks[].value in the innertext of the element
                                                v = eval('json.'+x.replace(h.name+'.', '')+'['+j+'].'+y);
                                                t = t.replace('{'+x+'[].'+y+'}', v);
                                            } else {
                                                // set display none for the element with react-collection=h.name and react-index=j
                                                o = $("*[react-collection='"+h.name+"."+x+"'][react-index='"+j+"']");
                                                // if o is displayed
                                                if ($(o).is(":visible")) {
                                                    // show the element
                                                    o.hide();
                                                    // if defined, call the callback function on_hide_collectionable.
                                                    if (h.on_hide_collectionable != undefined) { 
                                                        h.on_hide_collectionable(o);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    // get the name of the variable
                                    x = match.substring(1, match.length-1);
                                    v = eval('json.'+x.replace(h.name+'.', ''));
                                    // replace all occurrences of {sp500.value} with the value of sp500.value in the innertext of the element
                                    t = t.replace('{'+x+'}', v);
                                }

                            }
                        }
                        // set the innerText of the element to the new text
                        e.innerText = t;
                    } // if (matches != null)

                    // iterate all attributes of the element
                    for (var i = 0; i < e.attributes.length; i++) {
                        // get the attribute
                        a = e.attributes[i];

                        // get the original text of the element
                        let t = reactJs.original_attrs[id][a.name];
                        // skip if the attribute is not defined
                        if (t == undefined) {
                            continue;
                        }

                        // get all the substrings within the original text, that are between { and }
                        matches = t.match(new RegExp('{'+h.name+'([^}]+)}', 'g'));
                        // skip if there are no matches
                        if (matches == null) {
                            continue;
                        }

                        // get the original value of the attribute
                        let v = reactJs.original_attrs[id][a.name];
                        // if v is not undefined
                        if (v == undefined) {
                            // skip this attribute
                            continue;
                        }
                        // get all the substrings within the original value, that are between { and }
                        //matches = v.match(new RegExp('{'+h.name+'([^}]+)}', 'g'));
                        // iterate all substrings
                        for (var j = 0; j < matches.length; j++) {
                            let match = matches[j];
                            // if the match starts with the name of the poll
                            if (match.startsWith('{'+h.name)) {
                                // if the match includes an array-specifier like '{sp500.stocks[].value}', where 'sp500' is the name of the poll.
                                if (match.includes('[]')) {
                                    // what is te element in the collection
                                    n = $(e).attr('react-index');
                                    // get the name of the variable
                                    s = match.substring(1, match.length-1);
                                    // get name of the array
                                    array_name = s.substring(0, s.indexOf('[]')).replace(h.name+'.', '');
                                    // get the mergetag name
                                    mergetag_name = s.substring(s.indexOf('[]')+3);
                                    // get the value
                                    if (n<json[array_name].length) {
                                        // set display none for the element with react-collection=h.name and react-index=j
                                        o = $("*[react-collection='"+h.name+"."+array_name+"'][react-index='"+n+"']")
                                        // if o is displayed
                                        if ($(o).is(":hidden")) {
                                            // show the element
                                            o.show();
                                            // if defined, call the callback function on_show_collectionable.
                                            if (h.on_show_collectionable != undefined) { 
                                                h.on_show_collectionable(json, o);
                                            }    
                                        }
                                        // replace all occurrences of {sp500.value} with the value of sp500.value in the innertext of the element
                                        t = eval("json[array_name][n]."+mergetag_name);
                                        v = v.replace('{'+s+'}', t);
                                    } else {
                                        // set display none for the element with react-collection=h.name and react-index=j
                                        o = $("*[react-collection='"+h.name+"."+array_name+"'][react-index='"+n+"']");
                                        // if o is displayed
                                        if ($(o).is(":visible")) {
                                            // show the element
                                            o.hide();
                                            // if defined, call the callback function on_hide_collectionable.
                                            if (h.on_hide_collectionable != undefined) { 
                                                h.on_hide_collectionable(o);
                                            }
                                        }
                                    }
                                } else {
                                    // get the name of the variable
                                    s = match.substring(1, match.length-1);
                                    t = eval('json.'+s.replace(h.name+'.', ''));
                                    // replace all occurrences of {sp500.value} with the value of sp500.value in the innertext of the element
                                    v = v.replace('{'+s+'}', t);
                                }
                            }
                        }

                        // set the value of the attribute to the new value
                        a.value = v;
                    }
                }

                // if defined, call the callback function after_poll.
                if (h.after_poll != undefined) { 
                    h.after_poll(json, h);
                }        

                // call again the poll function after the interval
                if (reactJs.auto == true && param_auto == true) {                    
                    setTimeout(function(poll) {
                        reactJs.poll(poll, param_auto);
                    }, poll.interval, poll);
                }
            } // success
        }); // ajax    
    }, // poll

    init: function(h) {
        // load parameters and set default values to undefined parameters.
        if ( h.auto != undefined ) { 
            reactJs.auto = h.auto;
        } else {
            reactJs.auto = true;
        }
        polls = h.polls || [];
        // iterate all elements of the DOM, with a `react` attribute, 
        // and store their innerText and attributes into the original_texts
        // and original attributes arrays.
        $("*[react]").each(function() {
            t = $(this).text(); //.clone().children().remove().end().text();
            reactJs.original_texts[this.id] = t;
            // iterate all attributes of the element
            for (var i = 0; i < this.attributes.length; i++) {
                // get the attribute
                a = this.attributes[i];
                // remember the original value of the attribute
                reactJs.original_attrs[this.id] = reactJs.original_attrs[this.id] || {};
                reactJs.original_attrs[this.id][a.name] = a.value;
            }
        });

        // iterate all polls
        for (var i = 0; i < polls.length; i++) {
            poll = polls[i];
            reactJs.polls.push(poll);
        }

        // run polls allowing auto-update
        reactJs.run(true);
    }
};
console.log('Hello from react-'+reactJs.version()+'.min.js');